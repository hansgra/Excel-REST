{"name":"Excel-REST","tagline":"Work with web services (Salesforce, Google, and pretty much everything on the internet) directly from Excel","body":"Excel-REST: Excel REST Client\r\n=============================\r\n\r\nIt seems like everything has a REST webservice these days and there is no reason to leave Excel out of the fun. Excel-REST is designed to make working with complex webservices easy with Excel. It includes support for authentication, making async requests, automatically converting and parsing JSON, working with cookies and headers in requests and responses, and much more.\r\n\r\nGetting started\r\n---------------\r\n\r\n1. Download the [latest release (v3.0.2)](https://github.com/timhall/Excel-REST/releases)\r\n2. `Excel-REST - Blank.xlsm` has everything setup and ready to go.\r\n\r\nFor more details see the [Wiki](https://github.com/timhall/Excel-REST/wiki)\r\n\r\nExamples\r\n-------\r\n\r\nThe following examples demonstrate using the Google Maps API to get directions between two locations.\r\n\r\n### GetJSON Example\r\n```VB\r\nFunction GetDirections(Origin As String, Destination As String) As String\r\n    ' Create a RestClient for executing requests\r\n    ' and set a base url that all requests will be appended to\r\n    Dim MapsClient As New RestClient\r\n    MapsClient.BaseUrl = \"https://maps.googleapis.com/maps/api/\"\r\n    \r\n    ' Use GetJSON helper to execute simple request and work with response\r\n    Dim Resource As String\r\n    Dim Response As RestResponse\r\n    \r\n    Resource = \"directions/json?origin=\" & Origin & \"&destination=\" & Destination & \"&sensor=false\"\r\n    Set Response = MapsClient.GetJSON(Resource)\r\n    \r\n    ' => GET https://maps.../api/directions/json?origin=...&destination=...&sensor=false\r\n    \r\n    ProcessDirections Response\r\nEnd Function\r\n\r\nPublic Sub ProcessDirections(Response As RestResponse)\r\n    If Response.StatusCode = Ok Then\r\n        Dim Route As Dictionary\r\n        Set Route = Response.Data(\"routes\")(1)(\"legs\")(1)\r\n\r\n        Debug.Print \"It will take \" & Route(\"duration\")(\"text\") & _\r\n            \" to travel \" & Route(\"distance\")(\"text\") & _\r\n            \" from \" & Route(\"start_address\") & _\r\n            \" to \" & Route(\"end_address\")\r\n    Else\r\n        Debug.Print \"Error: \" & Response.Content\r\n    End If\r\nEnd Sub\r\n```\r\n\r\nThere are 3 primary components in Excel-REST: \r\n\r\n1. `RestRequest` for defining complex requests\r\n2. `RestClient` for executing requests\r\n3. `RestResponse` for dealing with responses. \r\n \r\nIn the above example, the request is fairly simple, so we can skip creating a `RestRequest` and instead use the `Client.GetJSON` helper to GET json from a specific url. In processing the response, we can look at the `StatusCode` to make sure the request succeeded and then use the parsed json in the `Data` parameter to extract complex information from the response. \r\n\r\n### RestRequest Example\r\n\r\nIf we wish to have more control over the request, the following example uses `RestRequest` to define a complex request.\r\n\r\n```VB\r\nFunction GetDirections(Origin As String, Destination As String) As String\r\n    Dim MapsClient As New RestClient\r\n    ' ... Setup client using GetJSON Example\r\n    \r\n    ' Create a RestRequest for getting directions\r\n    Dim DirectionsRequest As New RestRequest\r\n    DirectionsRequest.Resource = \"directions/{format}\"\r\n    DirectionsRequest.Method = httpGET\r\n    \r\n    ' Set the request format -> Sets {format} segment, content-types, and parses the response\r\n    DirectionsRequest.Format = json\r\n    \r\n    ' (Alternatively, replace {format} segment directly)\r\n    DirectionsRequest.AddUrlSegment \"format\", \"json\"\r\n    \r\n    ' Add parameters to the request (as querystring for GET calls and body otherwise)\r\n    DirectionsRequest.AddParameter \"origin\", Origin\r\n    DirectionsRequest.AddParameter \"destination\", Destination\r\n    \r\n    ' Force parameter as querystring for all requests\r\n    DirectionsRequest.AddQuerystringParam \"sensor\", \"false\"\r\n    \r\n    ' => GET https://maps.../api/directions/json?origin=...&destination=...&sensor=false\r\n    \r\n    ' Execute the request and work with the response\r\n    Dim Response As RestResponse\r\n    Set Response = MapsClient.Execute(DirectionsRequest)\r\n    \r\n    ProcessDirections Response\r\nEnd Function\r\n\r\nPublic Sub ProcessDirections(Response As RestResponse)\r\n    ' ... Same as previous examples\r\nEnd Sub\r\n```\r\n\r\nThe above example demonstrates some of the powerful feature available with `RestRequest`. Some of the features include:\r\n\r\n- Url segments (Replace {segment} in resource with value)\r\n- Method (GET, POST, PUT, PATCH, DELETE)\r\n- Format (json and url-encoded) for content-type and converting/parsing request and response\r\n- Parameters and QuerystringParams\r\n- Body\r\n- Cookies\r\n- Headers\r\n\r\nFor more details, see the `RestRequest` page in with [Wiki](https://github.com/timhall/Excel-REST/wiki/RestRequest)\r\n\r\n### Async Example\r\n\r\nThe above examples execute synchronously, but Excel-REST can run them asynchronously with ease so that your program can keep working and handle the response later once the request completes.\r\n\r\n```VB\r\nFunction GetDirections(Origin As String, Destination As String) As String\r\n    Dim MapsClient As New RestClient\r\n    Dim DirectionsRequest As New RestRequest\r\n    ' ... Create client and request using RestRequest Example\r\n    \r\n    ' Execute the request asynchronously\r\n    ' Pass in name of Public Sub as callback to be called asynchronously once request completes\r\n    MapsClient.ExecuteAsync DirectionsRequest, \"ProcessDirections\"\r\n    \r\n    ' Keep working, handling response later\r\nEnd Function\r\n\r\nPublic Sub ProcessDirections(Response As RestResponse)\r\n    ' (Called asynchronously!)\r\n    ' ... Same as previous examples\r\nEnd Sub\r\n```\r\n\r\n### Authentication Example\r\n\r\nThe following example demonstrates using an authenticator with Excel-REST to query Twitter. The `TwitterAuthenticator` (found in the `authenticators/` [folder](https://github.com/timhall/Excel-REST/tree/master/authenticators)) uses Twitter's OAuth 1.0a authentication and details of how it was created can be found in the [Wiki](https://github.com/timhall/Excel-REST/wiki/Implementing-your-own-IAuthenticator).\r\n\r\n```VB\r\nFunction QueryTwitter(query As String) As RestResponse\r\n    Dim TwitterClient As New RestClient\r\n    TwitterClient.BaseUrl = \"https://api.twitter.com/1.1/\"\r\n    \r\n    ' Setup authenticator\r\n    Dim TwitterAuth As New TwitterAuthenticator\r\n    TwitterAuth.Setup _\r\n        ConsumerKey:=\"Your consumer key\", _\r\n        ConsumerSecret:=\"Your consumer secret\"\r\n    Set TwitterClient.Authenticator = TwitterAUth\r\n    \r\n    ' Setup query request\r\n    Dim Request As New RestRequest\r\n    Request.Resource = \"search/tweets.{format}\"\r\n    Request.Format = json\r\n    Request.Method = httpGET\r\n    Request.AddParameter \"q\", query\r\n    Request.AddParameter \"lang\", \"en\"\r\n    Request.AddParameter \"count\", 20\r\n    \r\n    ' => GET https://api.twitter.com/1.1/search/tweets.json?q=...&lang=en&count=20\r\n    '    Authorization Bearer Token... (received and added automatically via TwitterAuthenticator)\r\n    \r\n    Set QueryTwitter = TwitterClient.Execute(Request)\r\nEnd Function\r\n```\r\n\r\nFor more details, check out the [Wiki](https://github.com/timhall/Excel-REST/wiki) and [Examples](https://github.com/timhall/Excel-REST/tree/master/examples)\r\n\r\n### Release Notes\r\n\r\n#### 3.0.0\r\n\r\n- Add `Client.GetJSON` and `Client.PostJSON` helpers to GET and POST JSON without setting up request\r\n- Add `AfterExecute` to `IAuthenticator` (Breaking change, all IAuthenticators must implement this new method)\r\n- __3.0.1__ Add `DigestAuthenticator`, new helpers, and cleanup\r\n- __3.0.2__ Switch timeout to `Long` and remove `RestClientBase` (out of sync with v3)\r\n\r\n#### 2.3.0\r\n\r\n- Add `form-urlencoded` format and helpers\r\n- Combine Body + Parameters and Querystring + Parameters with priority given to Body or Querystring, respectively\r\n\r\n#### 2.2.0\r\n\r\n- Add cookies support with `Request.AddCookie(key, value)` and `Response.Cookies`\r\n- __2.2.1__ Add `Response.Headers` collection of response headers\r\n\r\n#### 2.1.0\r\n\r\n- Add Microsoft Scripting Runtime dependency (for Dictionary support)\r\n- Add `RestClient.SetProxy` for use in proxy environments\r\n- __2.1.1__ Use `Val` for number parsing in locale-dependent settings\r\n- __2.1.2__ Add raw binary `Body` to `RestResponse` for handling files (thanks [@berkus](https://github.com/berkus))\r\n- __2.1.3__ Bugfixes and refactor\r\n\r\n#### 2.0.0\r\n\r\n- Remove JSONLib dependency (merged with RestHelpers)\r\n- Add RestClientBase for future use with extension for single-client applications\r\n- Add build scripts for import/export\r\n- New specs and bugfixes\r\n- __2.0.1__ Handle duplicate keys when parsing json\r\n- __2.0.2__ Add Content-Length header and 408 status code for timeout\r\n\r\n#### 1.1.0\r\n\r\nMajor Changes:\r\n\r\n- Integrate Excel-TDD to fully test Excel-REST library\r\n- Handle timeouts for sync and async requests\r\n- Remove reference dependencies and use CreateObject instead\r\n\r\nBugfixes:\r\n\r\n- Add cachebreaker as querystring param only\r\n- Add Join helpers to resolve double-slash issue between base and resource url\r\n- Only add \"?\" for querystring if querystring will be created and \"?\" isn't present\r\n- Only put parameters in body if there are parameters\r\n\r\n#### 0.2\r\n\r\n- Add async support\r\n\r\n### About\r\n\r\n- Design based heavily on the awesome [RestSharp](http://restsharp.org/)\r\n- Author: Tim Hall\r\n- License: MIT\r\n","google":"UA-38523419-3","note":"Don't delete this file! It's used internally to help with page regeneration."}